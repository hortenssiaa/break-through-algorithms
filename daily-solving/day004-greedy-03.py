# 큰 수의 법칙 #2
'''
[[6, 6, 6, 5], [6, 6, 6, 5] ... M까지 연속]
연속되는 패턴 : 6, 6, 6, 5 => K == 3 => k+1
1. M // K+1 : 몫이 K+1 의 횟수
  예) M:9, K:3
    [[6, 6, 6, 5], [6, 6, 6, 5], [6]]
    9/4 == 2, [6, 6, 6, 5]가 2개 필요
2. (M // K+1)*K : 가장 큰 수의 횟수
  예) [[6, 6, 6, 5], [6, 6, 6, 5], [6]] 에서 나머지 [6]을 생각하지 않고
     [6, 6, 6, 5]가 2개 있으니깐, 이 안의 k 를 곱하면, 가장 큰 수 의 횟수를 구할 수 있겠지?
3. M % (K+1) 횟수만큼, 가장큰 수 더하기
   -> M // K+1 가 나눠떨어지지 않는 경우
  예)  [[6, 6, 6, 5], [6, 6, 6, 5], [6]] 에서 나머지 [6]를 생각
      M:9, K+1:4 -> 9%8 == 1 -> [6]
'''

n, m, k = map(int, input().split())
data = list(map(int, input().split()))

data.sort()
first = data[n-1]
second = data[n-2]

count = (m // (k+1)) * k
count += m % (k+1)
result_max = count * first
result_min = (m // (k+1)) * second

print(result_max + result_min)